

import numpy as np
from typing import Callable, List, Tuple, Union
import scipy
import random

# lauout:
#             M00 D01
#             D02 M03 D04 M05
#     M06 D07 M08 D09 M10 D11
#     D12 M13 D14 M15 D16 M17 D18 M19
# D20 M21 D22 M23 D24 M25 D26 M27 D28
# M29 D30 M31 D32 M33 D34 M35 D36
#         D37 M38 D39 M40 D41 M42
#         M43 D44 M45 D46
#                 D47 M48

class d_5_layout :
    def __init__(self):
        self.cycle_time = 0.921
        self.measure_time = 0.500
        self.reset_time = 0.160
        self.idle_time = self.measure_time + self.reset_time
        self.sq_time = (self.cycle_time - self.idle_time) / 9
        self.qnum = 49
        self.data_qnum = 25
        self.meas_qnum = 24
        self.GoogleIndex = self._GoogleIndex_()

        self.default_read_idle_error = 0.
        self.default_read_error = 0.
        self.default_reset_error = 0.
        self.defalut_cz_idle_error = 0.

        self.sq_prob = self._qubit_sq_error_()
        self.nearest_index, self.cz_prob = self._qubit_cz_error_()
        self.sq_idle_prob = self._qubit_sq_idle_error_()
        self.cz_idle_prob = self._qubit_cz_idle_error_()
        self.read_idle_prob = self._qubit_read_idle_error_()
        self.reset_prob = self._qubit_reset_error_()
        self.read_prob = self._qubit_read_error_()

        self.sq_decay2_prob = self._decay2_prob_(self.sq_time)
        self.sq_decay3_prob = self._decay3_prob_(self.sq_time)
        self.idle_decay2_prob = self._decay2_prob_(self.idle_time)
        self.idle_decay3_prob = self._decay3_prob_(self.idle_time)

        # self.heat_prob = [6.4e-4 for ii in range(self.qnum)]
        # self.heat_prob = [6.4e-4 for ii in range(self.qnum)]
        self.sq_heat_prob = self._heat_prob_(self.sq_time)
        self.idle_heat_prob = self._heat_prob_(self.idle_time)

        # Heat to every stage.
        self.cz_leak_prob = [[2.0e-4 for jj in self.cz_prob[ii]] for ii in range(len(self.cz_prob))]
        self.cz_cross_prob = [[9.5e-4 for jj in self.cz_prob[ii]] for ii in range(len(self.cz_prob))]
        self.cz_dephase_prob = 0    # Not Given. Old value: 4e-4.

        self.swap_prob = 0.
        self.sq_prob = [e for e in self.sq_prob]

        self.weight = self._measure_weight_()
        self.sq_freq = self._sq_freq_()
        self.meas_index = [0,3,5,6,8,10,13,15,17,19,21,23,25,27,29,31,33,35,38,40,42,43,45,48]
        self.T1 = self._q_T1_()
        self.T2 = self._q_T2_()



    def _qubit_sq_error_ (self) :
        data =  [
            [0.000779938,36],
            [0.000624751,26],
            [0.00157196,32],
            [0.00103939,9],
            [0.00220941,16],
            [0.00122768,47],
            [0.000489395,2],
            [0.000839588,22],
            [0.00105136,28],
            [0.000929993,12],
            [0.00106992,34],
            [0.00136052,41],
            [0.00107839,44],
            [0.00120828,18],
            [0.0016446,24],
            [0.0013969,30],
            [0.000732493,37],
            [0.00118143,14],
            [0.00117254,46],
            [0.00159105,11],
            [0.00110168,20],
            [0.000504639,39],
            [0.00126937,1],
            [0.000631499,4],
            [0.000643401,7],
            [0.0011097,25],
            [0.00169913,5],
            [0.000902881,8],
            [0.000745358,40],
            [0.00126376,43],
            [0.00119987,21],
            [0.00117823,27],
            [0.000836134,10],
            [0.000869895,33],
            [0.000868499,17],
            [0.00106417,48],
            [0.00159772,3],
            [0.000880877,23],
            [0.000528111,29],
            [0.00096303,6],
            [0.00117476,13],
            [0.000986757,35],
            [0.00133574,19],
            [0.00141909,42],
            [0.000786247,45],
            [0.00103476,0],
            [0.00123634,31],
            [0.00132455,38],
            [0.00111441,15]
        ]
        outcome = [0. for ii in range(self.qnum)]
        for e in data:
            outcome[e[1]] = e[0]
        return outcome

    def _qubit_cz_error_ (self) :
        data =  [
            [0.00556929,40,34],
            [0.00333026,25,16],
            [0.0155869,38,32],
            [0.00579579,17,11],
            [0.00952145,45,39],
            [0.0075362,15,9],
            [0.00573694,43,37],
            [0.00646084,29,20],
            [0.00614261,42,36],
            [0.0066832,10,4],
            [0.000990486,21,12],
            [0.00531974,48,46],
            [0.00656797,13,7],
            [0.00834078,3,1],
            [0.00960535,8,2],
            [0.00421312,31,22],
            [0.00741657,27,18],
            [0.0049062,33,24],
            [0.00469027,35,26],
            [0.00726272,23,14],
            [0.00559241,33,34],
            [0.00433387,23,22],
            [0.00389052,15,16],
            [0.00631335,43,44],
            [0.00531168,45,46],
            [0.0052115,29,30],
            [0.0102926,3,4],
            [0.00655421,8,7],
            [0.00598408,40,39],
            [0.0146966,31,32],
            [0.00267779,21,20],
            [0.00415626,48,47],
            [0.00387344,42,41],
            [0.00311301,17,18],
            [0.00417455,13,14],
            [0.00687236,38,37],
            [0.0066335,27,26],
            [0.00890717,35,36],
            [0.00437718,25,24],
            [0.00683681,10,9],
            [0.00440729,45,44],
            [0.00610335,21,22],
            [0.00818925,40,41],
            [0.00706892,31,30],
            [0.00441989,0,1],
            [0.00373065,6,7],
            [0.00582391,13,12],
            [0.00548036,27,28],
            [0.00900769,33,32],
            [0.00862998,10,11],
            [0.00276658,38,39],
            [0.00625831,3,2],
            [0.00662996,35,34],
            [0.00589078,25,26],
            [0.00644155,5,4],
            [0.00655108,23,24],
            [0.00480328,17,16],
            [0.00493045,19,18],
            [0.00508742,15,14],
            [0.00747862,8,9],
            [0.00519429,35,41],
            [0.00453941,33,39],
            [0.00416312,15,24],
            [0.00319007,38,44],
            [0.00383918,40,46],
            [0.00739917,27,36],
            [0.00321772,8,14],
            [0.0051332,3,9],
            [0.00269513,6,12],
            [0.00619068,25,34],
            [0.00521475,13,22],
            [0.00386744,0,2],
            [0.00450499,31,37],
            [0.00482126,17,26],
            [0.0148873,19,28],
            [0.00513984,45,47],
            [0.00734976,21,30],
            [0.00984739,10,16],
            [0.00598616,23,32],
            [0.00571121,5,11]
        ]
        nearest_index = [[[],[]] for ii in range(self.qnum)]
        cz_error = [[] for ii in range(self.qnum)]
        for e in data:
            nearest_index[e[1]][0].append(e[2])
            nearest_index[e[2]][0].append(e[1])
            cz_error[e[1]].append(e[0])
            cz_error[e[2]].append(e[0])
        return nearest_index, cz_error

    def _qubit_sq_idle_error_ (self) :
        data = [
            [0.000760504,20],
            [0.000882761,24],
            [0.000744128,1],
            [0.000735477,22],
            [0.000629601,28],
            [0.000782386,41],
            [0.000644795,39],
            [0.00062868,26],
            [0.000807396,37],
            [0.000908826,7],
            [0.00106552,9],
            [0.000668468,11],
            [0.000736539,47]
        ]
        outcome = self._idle_prob_(self.sq_time)
        for e in data:
            outcome[e[1]] = e[0]
        return outcome
        

    def _qubit_cz_idle_error_ (self) :
        data =  [
            [0.000821745,6],
            [0.00121748,44],
            [0.0011409,30],
            [0.000816562,19],
            [0.000856257,28],
            [0.00106404,41],
            [0.000791426,0],
            [0.00100169,47],
            [0.00113081,5],
            [0.000821745,6],
            [0.00101201,1],
            [0.000986036,2],
            [0.000816562,19],
            [0.000856257,28],
            [0.000717425,12],
            [0.000909117,11],
            [0.000791426,0],
            [0.00113081,5],
            [0.00100169,47],
            [0.00103429,20],
            [0.000829396,42],
            [0.0010188,43],
            [0.000950005,48],
            [0.00109806,37],
            [0.0010199,29],
            [0.00127466,46],
            [0.00152931,36],
            [0.00103429,20],
            [0.000829396,42],
            [0.0010188,43],
            [0.00101201,1],
            [0.000950005,48],
            [0.000849482,4],
            [0.001236,7],
            [0.0010199,29],
            [0.000977015,18]
        ]
        outcome = [self.defalut_cz_idle_error for ii in range(self.qnum)]
        for e in data:
            outcome[e[1]] = e[0]
        return outcome

    def _qubit_read_idle_error_ (self) :
        data =  [
            [0.0365004,24],
            [0.0309937,30],
            [0.0216081,37],
            [0.019515,14],
            [0.0269394,11],
            [0.0248414,46],
            [0.016702,20],
            [0.0223624,1],
            [0.020847,39],
            [0.0250181,4],
            [0.0273305,7],
            [0.0281463,36],
            [0.019834,26],
            [0.0250774,32],
            [0.0279537,9],
            [0.0344119,16],
            [0.0208714,47],
            [0.0224743,2],
            [0.0268415,22],
            [0.0256152,28],
            [0.0204914,34],
            [0.0208691,12],
            [0.026165,41],
            [0.0224989,44],
            [0.0219985,18]
        ]
        outcome = [self.default_read_idle_error for ii in range(self.qnum)]
        for e in data:
            outcome[e[1]] = e[0]
        return outcome

    def _qubit_read_error_ (self) :
        data =  [
            [0.0188375,0],
            [0.019685,3],
            [0.0147175,5],
            [0.0202825,6],
            [0.014605,8],
            [0.0207225,10],
            [0.0217675,3],
            [0.02664,15],
            [0.016335,17],
            [0.0222725,19],
            [0.0415325,21],
            [0.0204225,23],
            [0.01578,25],
            [0.01822,27],
            [0.0119225,29],
            [0.024005,31],
            [0.01738,3],
            [0.014765,35],
            [0.028835,38],
            [0.0139575,40],
            [0.018365,42],
            [0.0212175,43],
            [0.015105,45],
            [0.013515,48],
            [0.0399675,1],
            [0.01114,2],
            [0.0109,4],
            [0.012895,7],
            [0.0140125,9],
            [0.0088925,11],
            [0.01651,12],
            [0.0156625,14],
            [0.0227725,16],
            [0.0217725,18],
            [0.02419,20],
            [0.0157925,22],
            [0.02023,24],
            [0.013775,26],
            [0.0255225,28],
            [0.0142775,30],
            [0.020165,32],
            [0.013065,34],
            [0.01245,36],
            [0.0203325,37],
            [0.0137725,39],
            [0.017295,41],
            [0.017305,44],
            [0.024705,46],
            [0.0149425,47]
        ]
        outcome = [self.default_read_error for ii in range(self.qnum)]
        for e in data:
            outcome[e[1]] = e[0]
        return outcome

    def _qubit_reset_error_ (self) :
        data =  [
            [0.000625,25],
            [0.0012,5],
            [0.003975,8],
            [0.0027625,40],
            [0.0016125,43],
            [0.004725,21],
            [0,27],
            [0.0019625,10],
            [0.0010375,17],
            [0.0013375,33],
            [0,48],
            [0.0017375,3],
            [0.000725,23],
            [0,29],
            [0.00815,6],
            [0.0082125,13],
            [0.0011,35],
            [0.0031875,19],
            [0.0009625,42],
            [0,45],
            [0,0],
            [0,31],
            [0.000325,38],
            [0.001025,15]
        ]
        outcome = [self.default_reset_error for ii in range(self.qnum)]
        for e in data:
            outcome[e[1]] = e[0]
        return outcome

    # def _measure_weight_(self):
    #     d2 = [0,5,6,19,29,42,43,48]
    #     d4 = [3,8,10,13,15,17,21,23,25,27,31,33,35,38,40,45]
    #     return [d2,d4]




    
    # 
    #             28 01
    #             06 29 02 26
    #       38 11 33 07 30 03
    #       16 39 12 34 08 31 04 27
    #    21 43 17 40 13 35 09 32 05
    #    48 22 44 18 41 14 36 10
    #          23 45 19 42 15 37
    #          49 24 46 20
    #                25 47
    def _qubit_para_sq_ (self) : 
        return [
            #   index   freq(G) sq(%)   read(%) T1(us)  T2(us)  yta(G)
            [   28,     5.94,   0.07,   2.0,    22.3,   41.4,   0.268],
            [    1,     5.74,   0.08,   4.0,    21.4,   27.6,   0.262],
            [    6,     5.97,   0.03,   1.1,    22.2,   28.2,   0.265],
            [   29,     5.81,   0.11,   2.2,    17.3,   23.9,   0.262],
            [    2,     6.25,   0.04,   1.1,    21.4,   37.6,   0.259],
            [   26,     6.15,   0.11,   1.6,    12.9,   36.0,   0.265],
            [   38,     5.98,   0.06,   2.1,    22.9,   37.7,   0.277],
            [   11,     5.75,   0.04,   1.3,    26.0,   18.7,   0.268],
            [   33,     5.80,   0.06,   1.5,    20.0,   39.3,   0.265],
            [    7,     5.75,   0.07,   1.4,    19.8,   16.7,   0.265],
            [   30,     6.10,   0.06,   2.1,    22.2,   35.4,   0.259],
            [    3,     6.27,   0.11,   0.9,    19.0,   36.8,   0.262],
            [   16,     6.17,   0.06,   1.7,    21.7,   52.3,   0.262],
            [   39,     5.86,   0.08,   2.5,    23.1,   26.6,   0.265],
            [   12,     5.93,   0.08,   1.6,    25.3,   35.9,   0.265],
            [   34,     6.15,   0.07,   2.8,    22.1,   34.4,   0.262],
            [    8,     5.88,   0.15,   2.3,    22.2,   28.1,   0.265],
            [   31,     6.18,   0.06,   1.8,    19.4,   28.6,   0.259],
            [    4,     5.86,   0.08,   2.2,    19.3,   31.6,   0.268],
            [   27,     6.20,   0.09,   3.0,    19.2,   45.5,   0.265],
            [   21,     5.75,   0.07,   2.4,    18.6,   29.4,   0.271],
            [   43,     5.97,   0.08,   4.2,    21.2,   31.7,   0.259],
            [   17,     5.75,   0.06,   1.6,    22.0,   27.7,   0.265],
            [   40,     6.06,   0.06,   2.2,    26.0,   14.8,   0.265],
            [   13,     5.73,   0.11,   2.0,    16.6,   24.7,   0.268],
            [   35,     6.06,   0.07,   1.6,    22.0,   16.5,   0.265],
            [    9,     5.97,   0.04,   1.4,    23.7,   34.3,   0.265],
            [   32,     6.31,   0.08,   2.3,    19.8,   29.4,   0.259],
            [    5,     6.26,   0.07,   2.6,    19.2,   41.1,   0.262],
            [   48,     6.12,   0.04,   1.2,    17.5,   31.9,   0.262],
            [   22,     5.82,   0.09,   1.4,    17.2,   26.3,   0.265],
            [   44,     5.85,   0.08,   2.4,    17.9,   30.1,   0.262],
            [   18,     6.10,   0.10,   2.0,    19.9,   29.1,   0.262],
            [   41,     6.21,   0.06,   1.8,    24.3,   36.4,   0.262],
            [   14,     6.12,   0.07,   1.3,    24.5,   18.7,   0.265],
            [   36,     6.19,   0.07,   1.6,    23.0,   35.2,   0.259],
            [   10,     5.88,   0.05,   1.2,    13.0,   19.4,   0.274],
            [   23,     5.97,   0.05,   2.0,    18.0,   27.1,   0.262],
            [   45,     5.74,   0.09,   3.1,    22.5,   35.0,   0.265],
            [   19,     5.98,   0.03,   1.4,    23.8,   32.7,   0.265],
            [   42,     5.76,   0.05,   1.4,    26.8,   38.9,   0.268],
            [   15,     5.73,   0.09,   1.7,    18.3,   28.4,   0.271],
            [   37,     6.03,   0.09,   1.8,    21.4,   39.4,   0.271],
            [   49,     5.80,   0.08,   2.2,    16.3,   34.3,   0.271],
            [   24,     5.90,   0.07,   1.7,    19.3,   21.9,   0.262],
            [   46,     6.06,   0.05,   1.7,    19.4,   33.2,   0.262],
            [   20,     6.11,   0.08,   2.5,    15.3,   23.7,   0.262],
            [   25,     5.76,   0.08,   1.5,    23.0,   26.9,   0.268],
            [   47,     6.25,   0.07,   1.3,    18.5,   34.6,   0.265]
        ]
    #             28 01
    #             06 29 02 26
    #       38 11 33 07 30 03
    #       16 39 12 34 08 31 04 27
    #    21 43 17 40 13 35 09 32 05
    #    48 22 44 18 41 14 36 10
    #          23 45 19 42 15 37
    #          49 24 46 20
    #                25 47
    def _qubit_para_cz_ (self) : 
        return [
            #   index1  index2  freq(G) cz(%)
            [   28,      1,     5.82,   0.35],
            [    6,     29,     6.00,   0.50],
            [   29,      2,     6.06,   0.82],
            [    2,     26,     6.09,   0.52],
            [   38,     11,     5.85,   0.30],
            [   11,     33,     5.93,   0.52],
            [   33,      7,     5.91,   0.60],
            [    7,     30,     5.91,   0.55],
            [   30,      3,     6.11,   0.69],
            [   16,     39,     5.98,   0.47],
            [   39,     12,     5.83,   0.33],
            [   12,     34,     6.03,   0.41],
            [   34,      8,     6.02,   0.31],
            [    8,     31,     6.02,   0.38],
            [   31,      4,     6.03,   0.25],
            [    4,     27,     6.08,   0.39],
            [   21,     43,     5.76,   0.21],
            [   43,     17,     5.65,   0.49],
            [   17,     40,     5.95,   0.35],
            [   40,     13,     5.86,   0.52],
            [   13,     35,     5.84,   0.35],
            [   35,      9,     5.96,   0.47],
            [    9,     32,     5.95,   0.53],
            [   32,      5,     6.19,   0.44],
            [   48,     22,     5.96,   0.42],
            [   22,     44,     6.01,   0.57],
            [   44,     18,     6.13,   1.18],
            [   18,     41,     6.06,   0.72],
            [   41,     14,     6.04,   0.45],
            [   14,     36,     6.05,   0.53],
            [   36,     10,     6.05,   0.71],
            [   23,     45,     5.76,   0.55],
            [   45,     19,     5.87,   0.22],
            [   19,     42,     5.91,   0.48],
            [   42,     15,     5.71,   0.66],
            [   15,     37,     5.94,   0.31],
            [   49,     24,     5.85,   0.51],
            [   24,     46,     5.96,   0.35],
            [   46,     20,     6.06,   0.42],
            [   25,     47,     5.96,   0.33],

            [   21,     48,     5.92,   0.52],
            [   38,     16,     6.05,   0.22],
            [   16,     43,     6.03,   0.08],
            [   43,     22,     5.67,   0.59],
            [   11,     39,     5.86,   0.53],
            [   39,     17,     5.86,   0.42],
            [   17,     44,     5.84,   0.34],
            [   44,     23,     6.00,   0.36],
            [   23,     49,     5.92,   0.46],
            [   28,      6,     6.01,   0.31],
            [    6,     33,     5.99,   0.77],
            [   33,     12,     5.95,   0.26],
            [   12,     40,     5.96,   0.58],
            [   40,     18,     5.95,   0.48],
            [   18,     45,     5.97,   1.25],
            [   45,     24,     5.80,   0.26],
            [    1,     29,     5.87,   0.67],
            [   29,      7,     5.87,   0.41],
            [    7,     34,     6.07,   0.60],
            [   34,     13,     5.85,   0.33],
            [   13,     41,     5.83,   0.39],
            [   41,     19,     6.11,   0.36],
            [   19,     46,     5.91,   0.76],
            [   46,     25,     5.91,   0.41],
            [    2,     30,     6.09,   0.53],
            [   30,      8,     5.95,   0.79],
            [    8,     35,     5.95,   0.27],
            [   35,     14,     5.98,   0.50],
            [   14,     42,     6.01,   0.45],
            [   42,     20,     6.04,   0.31],
            [   20,     47,     6.06,   0.43],
            [   26,      3,     6.11,   0.46],
            [    3,     31,     6.02,   0.46],
            [   31,      9,     6.06,   0.39],
            [    9,     36,     5.83,   0.38],
            [   36,     15,     5.87,   0.42],
            [    4,     32,     5.93,   0.59],
            [   32,     10,     6.21,   0.59],
            [   10,     37,     6.01,   0.49],
            [   27,      5,     6.09,   1.19]
        ]

    def _GoogleIndex_ (self):
        data_raw = self._qubit_para_sq_()
        qindex = [0 for ii in range(len(data_raw))]
        for ii in range(len(data_raw)):
            qindex[data_raw[ii][0] - 1] = ii
        return qindex
    def _OldIndex2GoogleIndex_ (self, qindex):
        return [self.GoogleIndex[e - 1] for e in qindex]

    def _measure_weight_(self):
        d2 = [26,27,28,37,38,47,48,49]
        d4 = [e+1 for e in range(25,49) if e+1 not in d2]
        return [self._OldIndex2GoogleIndex_(d2),self._OldIndex2GoogleIndex_(d4)]
    def _sq_freq_ (self) :
        data_raw = self._qubit_para_sq_()
        return [e[1] for e in data_raw]
    def _decay2_prob_ (self, idle_time: float) :
        data_raw = self._qubit_para_sq_()
        return [1 - np.exp(- idle_time / e[4] * 2) for e in data_raw]
    def _decay3_prob_ (self, idle_time: float) :
        data_raw = self._qubit_para_sq_()
        return [1 - np.exp(- idle_time / e[4] * 3) for e in data_raw]
    def _idle_prob_ (self, idle_time: float) :
        data_raw = self._qubit_para_sq_()
        return [1 - np.exp(- idle_time / (e[4] + 2 * e[5]) * 3) for e in data_raw]
    def _heat_prob_ (self, idle_time: float) :
        data_raw = self._qubit_para_sq_()
        return [(1 - np.exp(- idle_time / 700)) / 2 for e in data_raw]
    def _q_T1_ (self):
        data_raw = self._qubit_para_sq_()
        return [e[4] for e in data_raw]
    def _q_T2_ (self):
        data_raw = self._qubit_para_sq_()
        return [e[5] for e in data_raw]

    












def main():
    a = d_5_layout()
    # print(a.CZindex)
    # print(a.nearest_index)
    # print(a.weight)
    # print(a._cz_prob_(49))

    print('sq_prob:',sum(a.sq_prob)/a.qnum)
    print('cz_prob:',np.sum([np.sum(e) for e in a.cz_prob])/np.sum([len(e) for e in a.cz_prob]))
    print('read_prob:',sum(a.read_prob)/a.qnum)
    print('reset_prob:',sum(a.reset_prob)/a.qnum)
    print('idle_prob:',sum(a.read_idle_prob)/a.qnum)
    print('heat_prob:',sum(a.heat_prob)/a.qnum)

    # for ii in range(len(a.read_idle_prob)):
    #     print(ii,a.read_idle_prob[ii])


if __name__ == '__main__':
    main()










#     def _sq_prob_ (self) :
#         data_raw = self._qubit_para_sq_()
#         data = [0 for ii in range (len(data_raw))]
#         for ii in range (len(data_raw)):
#             data[data_raw[ii][0] - 1] = data_raw[ii][2]/100
#         return data
#     def _read_prob_ (self) :
#         data_raw = self._qubit_para_sq_()
#         data = [0 for ii in range (len(data_raw))]
#         for ii in range (len(data_raw)):
#             data[data_raw[ii][0] - 1] = data_raw[ii][3]/100
#         return data
#     def _idle_prob_ (self, idle_time: float) :
#         data_raw = self._qubit_para_sq_()
#         data = [0 for ii in range (len(data_raw))]
#         for ii in range (len(data_raw)):
#             data[data_raw[ii][0] - 1] = 1 - np.exp(- idle_time / (data_raw[ii][4] + 2 * data_raw[ii][5]) * 3)
#         return data
#     def _decay2_prob_ (self, idle_time: float) :
#         data_raw = self._qubit_para_sq_()
#         data = [0 for ii in range (len(data_raw))]
#         for ii in range (len(data_raw)):
#             data[data_raw[ii][0] - 1] = 1 - np.exp(- idle_time / data_raw[ii][4] * 2)
#         return data
#     def _decay3_prob_ (self, idle_time: float) :
#         data_raw = self._qubit_para_sq_()
#         data = [0 for ii in range (len(data_raw))]
#         for ii in range (len(data_raw)):
#             data[data_raw[ii][0] - 1] = 1 - np.exp(- idle_time / data_raw[ii][4] * 3)
#         return data
#     def _sq_freq_ (self) :
#         data_raw = self._qubit_para_sq_()
#         data = [0 for ii in range (len(data_raw))]
#         for ii in range (len(data_raw)):
#             data[data_raw[ii][0] - 1] = data_raw[ii][1]
#         return data
#     def _cz_prob_ (self, qnum: int) :
#         data_raw = self._qubit_para_cz_()
#         data = [0 for ii in range (2*len(data_raw))]
#         for ii in range (len(data_raw)):
#             data[2 * ii] = data_raw[ii]
#             data[2 * ii + 1] = data_raw[ii].copy()
#             data[2 * ii + 1][0], data[2 * ii + 1][1] = data[2 * ii + 1][1], data[2 * ii + 1][0]
#         data.sort(key = lambda x: x[0] * 100 + x[1])
#         prob = [[] for ii in range(qnum)]
#         for e in data:
#             prob[e[0] - 1].append(e[3] / 100)
#         return prob

    # nearest_index[ qubit index - 1 ] = [ [nearest qubit index] , [second nearest qubit index] ].
    #     qubit indexes:
        
    #        01 02 03 04 05 
    #        06 07 08 09 10
    #        11 12 13 14 15
    #        16 17 18 19 20
    #        21 22 23 24 25
           
    #             26    27
    #       28 29 30 31 32
    #          33 34 35 36 37
    #       38 39 40 41 42
    #          43 44 45 46 47
    #          48    49
        
    #                 28 01
    #                 06 29 02 26
    #           38 11 33 07 30 03
    #           16 39 12 34 08 31 04 27
    #        21 43 17 40 13 35 09 32 05
    #        48 22 44 18 41 14 36 10
    #              23 45 19 42 15 37
    #              49 24 46 20
    #                    25 47
        
        
    # def _CZ_index_(self):
    #     CZ1 = [1,29,2,30,3,31,4,32,6,33,7,34,8,35,9,36,10,37,11,39,12,40,13,41,14,42,16,43,17,44,18,45,19,46,20,47,21,48,23,49]
    #     CZ2 = [2,29,4,31,7,30,8,34,9,32,10,36,11,33,12,39,13,35,14,41,15,37,17,40,18,44,19,42,20,46,21,43,22,48,23,45,24,49,25,47]
    #     CZ3 = [1,28,2,26,3,30,4,27,5,32,6,29,7,33,8,31,9,35,11,38,12,34,13,40,14,36,15,42,16,39,17,43,18,41,19,45,22,44,24,46]
    #     CZ4 = [3,26,5,27,6,28,7,29,8,30,9,31,10,32,12,33,13,34,14,35,15,36,16,38,17,39,18,40,19,41,20,42,22,43,23,44,24,45,25,46]
    #     return [CZ1,CZ2,CZ3,CZ4]

    # def _measure_weight_(self):
    #     d2 = [26,27,28,37,38,47,48,49]
    #     d4 = [e+1 for e in range(25,49) if e+1 not in d2]
    #     return [d2,d4]

    # def _nearest_index_(self):
    #     nearest_index = [
    #     [[      28,29],[       2, 6]],  # 01
    #     [[   26,29,30],[    1, 3, 7]],  # 02
    #     [[   26,30,31],[    2, 4, 8]],  # 03
    #     [[   27,31,32],[    3, 5, 9]],  # 04
    #     [[      27,32],[       4,10]],  # 05
    #     [[   28,29,33],[    1, 7,11]],  # 06
    #     [[29,30,33,34],[ 2, 6, 8,12]],  # 07
    #     [[30,31,34,35],[ 3, 7, 9,13]],  # 08
    #     [[31,32,35,36],[ 4, 8,10,14]],  # 09
    #     [[   32,36,37],[    5, 9,15]],  # 10
    #     [[   33,38,39],[    6,12,16]],  # 11
    #     [[33,34,39,40],[ 7,11,13,17]],  # 12
    #     [[34,35,40,41],[ 8,12,14,18]],  # 13
    #     [[35,36,41,42],[ 9,13,15,19]],  # 14
    #     [[   36,37,42],[   10,14,20]],  # 15
    #     [[   38,39,43],[   11,17,21]],  # 16
    #     [[39,40,43,44],[12,16,18,22]],  # 17
    #     [[40,41,44,45],[13,17,19,23]],  # 18
    #     [[41,42,45,46],[14,18,20,24]],  # 19
    #     [[   42,46,47],[   15,19,25]],  # 20
    #     [[      43,48],[      16,22]],  # 21
    #     [[   43,44,48],[   17,21,23]],  # 22
    #     [[   44,45,49],[   18,22,24]],  # 23
    #     [[   45,46,49],[   19,23,25]],  # 24
    #     [[      46,47],[      20,24]],  # 25
    #     [[],[         30]],     # 26
    #     [[],[         32]],     # 27
    #     [[],[         29]],     # 28
    #     [[],[   28,30,33]],     # 29
    #     [[],[26,29,31,34]],     # 30
    #     [[],[   30,32,35]],     # 31
    #     [[],[   27,31,36]],     # 32
    #     [[],[   29,34,39]],     # 33
    #     [[],[30,33,35,40]],     # 34
    #     [[],[31,34,36,41]],     # 35
    #     [[],[32,35,37,42]],     # 36
    #     [[],[         36]],     # 37
    #     [[],[         39]],     # 38
    #     [[],[33,38,40,43]],     # 39
    #     [[],[34,39,41,44]],     # 40
    #     [[],[35,40,42,45]],     # 41
    #     [[],[   36,41,46]],     # 42
    #     [[],[   39,44,48]],     # 43
    #     [[],[   40,43,45]],     # 44
    #     [[],[41,44,46,49]],     # 45
    #     [[],[   42,45,47]],     # 46
    #     [[],[         46]],     # 47
    #     [[],[         43]],     # 48
    #     [[],[         45]]]     # 49
    #     for ii in range( 25 , 49):
    #         for jj in  range (25):
    #             if ii + 1 in nearest_index[jj][0]:
    #                 nearest_index[ii][0].append(jj + 1)
    #     return nearest_index

    # def _minus_one_recursion_(self, input: Union[int, List], output: Union[int, List]) -> Union[int, List]:
    #     output = input
    #     if isinstance(input,int):
    #         output = input - 1
    #     else:
    #         for ii in range (len(input)):
    #             output[ii] = self._minus_one_recursion_(input[ii],output[ii])
    #     return output
    # def _minus_one_(self, input):
    #     return self._minus_one_recursion_(input,input)
